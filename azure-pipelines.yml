# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'a84bfb04-c385-4f18-bc96-015265fc800e'
  imageRepository: 'azurevote'
  containerRegistry: 'oneillalacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/azure-vote/Dockerfile'
  tag: '$(Build.BuildId)'
  # Storage
  terraformstoragerg: 'terraformrg'
  terraformstorageaccount: 'terraformstorage78219e1c'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - script: sed -i 's/azurevote:latest/azurevote:$(tag)/g' azure-vote-all-in-one-redis.yaml
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'azure-vote-all-in-one-redis.yaml'
        publishLocation: 'pipeline'
  - job: IAC
    displayName: Publish terrform artefacts
    pool:
      name: Hosted VS2017
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Terraform files to artifacts'
      inputs:
        SourceFolder: Terraform
        TargetFolder: '$(build.artifactstagingdirectory)/Terraform'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
- stage: Provision_Infra
  displayName: Provision infrastructure
  jobs:
  - job: Infra
    displayName: Infra
    pool:
      name: Hosted VS2017
      demands:
      - azureps
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          dir $(System.WorkFolder)
          dir $(Pipeline.Workspace)
          dir $(System.DefaultWorkingDirectory)
          dir $(Agent.BuildDirectory)
    - task: AzureCLI@1
      displayName: 'Azure CLI to deploy required Azure resources'
      inputs:
        azureSubscription: 'Azure for Students (37dc6063-359f-4693-b941-add4a5685359)'
        scriptLocation: inlineScript
        inlineScript: |
          # this will create Azure resource group
          call az group create --location westus --name $(terraformstoragerg)
          call az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location westus --sku Standard_LRS
          call az storage container create --name terraform --account-name $(terraformstorageaccount)
          call az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount)
    - task: AzurePowerShell@3
      displayName: 'Azure PowerShell script to get the storage key'
      inputs:
        azureSubscription: 'Azure for Students (37dc6063-359f-4693-b941-add4a5685359)'
        ScriptType: InlineScript
        Inline: |
          # Using this script we will fetch storage key which is required in terraform file to authenticate backend stoarge account
          $key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
          Write-Host "##vso[task.setvariable variable=storagekey]$key"
        azurePowerShellVersion: LatestVersion
    - task: replacetokens@3
      inputs:
        targetFiles: '**/*.tf'
        encoding: 'auto'
        writeBOM: true
        escapeType: 'none'
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '__'
        tokenSuffix: '__'
    - task: TerraformInstaller@0
      displayName: 'Install Terraform 0.12.3'
      inputs:
        terraformVersion: '0.12.3'
    - task: TerraformTaskV1@0
      displayName: 'Terraform : init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceArm: 'Azure for Students (37dc6063-359f-4693-b941-add4a5685359)'
        backendAzureRmResourceGroupName: '$(terraformstoragerg)'
        backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
        backendAzureRmContainerName: 'terraform'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV1@0
      displayName: 'Terraform : plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        commandOptions: '-lock-timeout=180s'
        environmentServiceNameAzureRM: 'Azure for Students (37dc6063-359f-4693-b941-add4a5685359)'
    - task: TerraformTaskV1@0
      displayName: 'Terraform : apply -auto-approve'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        commandOptions: '-auto-approve'
        environmentServiceNameAzureRM: 'Azure for Students (37dc6063-359f-4693-b941-add4a5685359)'
- stage: Deploy
  displayName: Deploy app
  jobs:
  - job: deploy
    displayName: Deploy app
    pool:
      name: Hosted VS2017
      demands:
      - azureps
    steps:
    - task: Kubernetes@0
      displayName: 'kubectl apply'
      inputs:
        kubernetesServiceConnection: aksconn
        namespace: default
        command: apply
        useConfigurationFile: true
        configuration: '$(System.DefaultWorkingDirectory)/azure-vote-all-in-one-redis.yaml'

